\boolfalse {citerequest}\boolfalse {citetracker}\boolfalse {pagetracker}\boolfalse {backtracker}\relax 
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {1}{\ignorespaces A photorealistic computer generated image using pathtracing.\relax }}{3}{figure.caption.1}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {2}{\ignorespaces How radiosity globally illuminates a scene. With each iteration there are more light emitters, meaning that there are more possible patches that can be illuminated. In the first iteration, the only light-emitters are the windows (not visible in the frame). After 16 iterations the scene is sufficiently saturated.\relax }}{4}{figure.caption.2}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {3}{\ignorespaces The OpenGL graphics pipeline. The steps within blue boxes are programmable.\relax }}{5}{figure.caption.3}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {4}{\ignorespaces An albedo-buffer (a), a z-buffer (b), a normal-buffer (c) and a locally illuminated scene rendered using all of those buffers (d).\relax }}{6}{figure.caption.4}
\defcounter {refsection}{0}\relax 
\contentsline {subfigure}{\numberline {(a)}{\ignorespaces {}}}{6}{figure.caption.4}
\defcounter {refsection}{0}\relax 
\contentsline {subfigure}{\numberline {(b)}{\ignorespaces {}}}{6}{figure.caption.4}
\defcounter {refsection}{0}\relax 
\contentsline {subfigure}{\numberline {(c)}{\ignorespaces {}}}{6}{figure.caption.4}
\defcounter {refsection}{0}\relax 
\contentsline {subfigure}{\numberline {(d)}{\ignorespaces {}}}{6}{figure.caption.4}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {5}{\ignorespaces Diverse visual effects caused by global illumination inside a cornell box. The image was rendered using pathtracing.\relax }}{7}{figure.caption.5}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {6}{\ignorespaces Computing the ambient occlusion factor $AO$ via sphere sampling.\relax }}{7}{figure.caption.6}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {7}{\ignorespaces Sampling points for color-bleeding using the z-buffer.\relax }}{8}{figure.caption.7}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {8}{\ignorespaces Scene without shadow-mapping (a) and with shadow-mapping (b). The same scene rendered from the light's point of view (c) and its z-buffer (d)\relax }}{8}{figure.caption.8}
\defcounter {refsection}{0}\relax 
\contentsline {subfigure}{\numberline {(a)}{\ignorespaces {}}}{8}{figure.caption.8}
\defcounter {refsection}{0}\relax 
\contentsline {subfigure}{\numberline {(b)}{\ignorespaces {}}}{8}{figure.caption.8}
\defcounter {refsection}{0}\relax 
\contentsline {subfigure}{\numberline {(c)}{\ignorespaces {}}}{8}{figure.caption.8}
\defcounter {refsection}{0}\relax 
\contentsline {subfigure}{\numberline {(d)}{\ignorespaces {}}}{8}{figure.caption.8}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {9}{\ignorespaces A texture indicating fragments that failed the depth-test (white means failed).\relax }}{9}{figure.caption.9}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {10}{\ignorespaces How a cube-map is rendered. The black sphere in the lower image represents the camera. The resulting six renders are put together in the cube-map in the upper image.\relax }}{9}{figure.caption.10}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {11}{\ignorespaces Minimum depth separation helps with finding the next front-facing surface, i.e. the next object.\relax }}{10}{figure.caption.11}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {12}{\ignorespaces How well the oracles predictions compare to exact peeling results.\relax }}{10}{figure.caption.12}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {13}{\ignorespaces Halos caused by traditional screen space ambient occlusion.\relax }}{13}{figure.caption.13}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {14}{\ignorespaces Samping on a single layer results in point $p$ being half-occluded despite being perfectly visible.\relax }}{13}{figure.caption.14}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {15}{\ignorespaces Screen space radiosity using a single layer g-buffer.\relax }}{14}{figure.caption.15}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {16}{\ignorespaces Double screen space radiosity using a two layer deep g-buffer.\relax }}{14}{figure.caption.16}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {17}{\ignorespaces A scene with reflections.\relax }}{15}{figure.caption.17}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {18}{\ignorespaces The same scene rendered with a single layer g-buffer\relax }}{15}{figure.caption.18}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {19}{\ignorespaces The same scene rendered with a two layer deep g-buffer.\relax }}{15}{figure.caption.19}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {20}{\ignorespaces n-Screen space ambient occlusion using different amounts of layers and their errors.\relax }}{16}{figure.caption.20}
\defcounter {refsection}{0}\relax 
\contentsline {figure}{\numberline {21}{\ignorespaces An image rendered without (left) and with the usage of 2-layer deep g-buffers (right). The image was generated in 10.8ms at 1080p using NVIDIA GeForce 980, which implies a theoretical framerate of 92 frames per second.\relax }}{16}{figure.caption.21}
